!EvalModel
parameters: [Omega, sig_zz, b_xx, b_yy, b_zz, b_xy, b_yz, b_xz, bc_xx, bc_yy, bc_zz, bc_xy, bc_yz, bc_xz]
model: !Switch
  [Omega]: !LuaMap
        returns: [Omega]
        function: |
         function f (x)
           zStressDecreaseStart = -14000.;
           zStressDecreaseStop = -18000.;
           zStressDecreaseWidth = zStressDecreaseStart - zStressDecreaseStop;
           if (x["z"] >= zStressDecreaseStart) then
              Omega = 1.0
           elseif (x["z"] >= zStressDecreaseStop) then
              a = 1.0-(x["z"]-zStressDecreaseStop)/zStressDecreaseWidth;
              Sx = (3.0*a*a-2.0*a*a*a);
              Omega = 1.0-0.99*Sx;
           else
              Omega = 0.01;
           end
           return {
             Omega = Omega
           }
           end
  [b_xx, b_yy, b_zz, b_xy, b_yz, b_xz]: !EvalModel
    parameters: [sig_zz,S, SH_max]
    model: !Switch
      [sig_zz]: !Include Mw_78_Turkey_sig_zz.yaml
      [SH_max]: !Any
          components:
            - !GroupFilter
              # This is the 7.8 hypocenter fault
              groups: [65]
              components: !ConstantMap
                map:
                    SH_max:  -10.0
            - !LuaMap
                returns: [SH_max]
                function: |
                 function f (x)
                    x1 = -0.7682212795973759 * x["x"] + x["y"] 

                    if x1 > 60e3 then
                      -- this is roughly the region of the main aftershock
                      xi = x["x"] + x["y"] 
                      aX =  {-1e10, 80e3, 115e3, 140e3, 175e3, 1e10}
                      aData = {50,   50,     70,    70,  25.0, 25.0}
                    else
                      -- this is roughly the region of the mainshock
                      xi = x["x"] + x["y"] 
                      aX =  {-1e10, -85e3, -25e3, 35e3, 115e3, 175e3, 1e10}
                      aData = {-20,   -20,   -15, 15.0,  15.0,  25.0, 25.0}
                    end

                    -- this implements a linear interpolation
                    if (aX[1] > xi) or ( xi>aX[#aX] ) then
                      io.write(aX[1], " ", xi, " ", aX[#aX], " are not sorted as expected\n")
                    end

                    for i in pairs(aX) do
                      if (aX[i]>xi) then
                        SH_max = aData[i-1] + (xi - aX[i-1]) / (aX[i] - aX[i-1]) * (aData[i] - aData[i-1])
                        break
                      end
                    end
                    return {
                      SH_max=SH_max
                    }
                 end

      [S]: !Any
          components:
            - !GroupFilter
              # This is the 7.8 hypocenter fault
              groups: [65]
              components: !LuaMap
                returns: [S]
                function: |
                 function f (x)
                  -- R = 0.6 for model with subshear on hypocenter fault
                  R = 0.6
                  return {
                    S = (1.0/R-1.0)
                  }
                  end
            - !GroupFilter
              # This is the 7.7 NS trending fault
              groups: [69]
              components: !LuaMap
                returns: [S]
                function: |
                 function f (x)
                  R = 0.8
                  return {
                    S = (1.0/R-1.0)
                  }
                  end                 
            - !LuaMap
                returns: [S]
                function: |
                 function f (x)
                  x1 = -0.7682212795973759 * x["x"] + x["y"] 
                  xi = x["x"] + x["y"] 
                  if x1 > 60e3 then
                    -- this is roughly the region of the main aftershock
                    aX =  {-1e10, 80e3, 115e3, 140e3, 175e3, 1e10}
                    aData = {0.65,   0.65,     0.65,    0.65,  0.4, 0.4}
                  else
                    -- this is roughly the region of the mainshock
                    aX =  {-1e10, -95e3 ,-85e3, -25e3, 35e3, 80e3, 115e3, 175e3, 1e10}
                    aData = {0.30,0.30, 0.40, 0.450, 0.450, 0.450, 0.43, 0.35,  0.35}
                  end
                  -- this implements a linear interpolation
                  if (aX[1] > xi) or ( xi>aX[#aX] ) then
                    io.write(aX[1], " ", xi, " ", aX[#aX], " are not sorted as expected\n")
                  end

                  for i in pairs(aX) do
                    if (aX[i]>xi) then
                      R = aData[i-1] + (xi - aX[i-1]) / (aX[i] - aX[i-1]) * (aData[i] - aData[i-1])
                      break
                    end
                  end

                  return {
                    S = (1.0/R-1.0)
                  }
                  end
    components: !AndersonianStress
      constants:
        mu_d:      0.2
        mu_s:      0.6
        cohesion:  0.0
        s2ratio: 0.75
        S_v: 2
  [sig_zz]: !Include Mw_78_Turkey_sig_zz.yaml
  [bc_xx, bc_yy, bc_zz,bc_xy, bc_yz, bc_xz]: !Include Mw_78_Turkey_stress_change.yaml  
components: !LuaMap
  returns: [s_xx, s_yy, s_zz, s_xy, s_yz, s_xz]
  function: |
     function f (x)
      return {
        s_xx = x["Omega"] * (x["b_xx"] + x["bc_xx"]) + (1.0-x["Omega"]) * x["sig_zz"],
        s_yy = x["Omega"] * (x["b_yy"] + x["bc_yy"]) + (1.0-x["Omega"]) * x["sig_zz"],
        s_zz = x["Omega"] * (x["b_zz"] + x["bc_zz"]) + (1.0-x["Omega"]) * x["sig_zz"],
        s_xy = x["Omega"] * (x["b_xy"] + x["bc_xy"]),
        s_yz = x["Omega"] * (x["b_yz"] + x["bc_yz"]),
        s_xz = x["Omega"] * (x["b_xz"] + x["bc_xz"])
      }
      end

